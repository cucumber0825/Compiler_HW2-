/* Definition section */
%{
#include "declare.h"
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 1000
#define V_T 0
#define I_T 1
#define F_T 2
#define S_T 3
#define B_T 4
#define ID_T 5

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];
int comment_number = 0;
int line_number = 0;
int last_comment_line = -1;
void dump_symbol(int p);
int end_flag = 0;
int syntax_err = 0;
int semantic_err = 0;
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT yylval.val.id_name = strdup(yytext); return '+'; }
"-" 	{ CONCAT yylval.val.id_name = strdup(yytext); return '-'; }
"*" 	{ CONCAT yylval.val.id_name = strdup(yytext); return '*'; }
"/" 	{ CONCAT yylval.val.id_name = strdup(yytext); return '/'; }
"%"     { CONCAT yylval.val.id_name = strdup(yytext); return '%'; }
"++"    { CONCAT yylval.val.id_name = strdup(yytext); return INC; }
"--"    { CONCAT yylval.val.id_name = strdup(yytext); return DEC; }

 /* Relational */
">"		{ CONCAT yylval.val.id_name = strdup(yytext); return '>'; }
"<"		{ CONCAT yylval.val.id_name = strdup(yytext); return '<';}
">="	{ CONCAT yylval.val.id_name = strdup(yytext); return GEQ;}
"<="	{ CONCAT yylval.val.id_name = strdup(yytext); return LEQ;}
"=="	{ CONCAT yylval.val.id_name = strdup(yytext); return EQL;}
"!="	{ CONCAT yylval.val.id_name = strdup(yytext); return NEQ;}

 /* Assignment */
"="		{ CONCAT yylval.val.id_name = strdup(yytext); return '='; }
"+="	{ CONCAT yylval.val.id_name = strdup(yytext); return ADD_ASSIGN; }
"-="	{ CONCAT yylval.val.id_name = strdup(yytext); return SUB_ASSIGN; }
"*="	{ CONCAT yylval.val.id_name = strdup(yytext); return MUL_ASSIGN; }
"/="	{ CONCAT yylval.val.id_name = strdup(yytext); return QUO_ASSIGN; }
"%="	{ CONCAT yylval.val.id_name = strdup(yytext); return REM_ASSIGN; }

 /* Logical */
"&&"	{ CONCAT return LAND; }
"||"	{ CONCAT return LOR; }
"!"		{ CONCAT return '!'; }

 /* Delimiters */
"("		{ CONCAT return '('; }
")"		{ CONCAT return ')'; }
"{"		{ CONCAT return '{'; }
"}"		{ if(end_flag == 2) end_flag = 3; CONCAT return '}'; }
"["		{ CONCAT return '['; }
"]"		{ CONCAT return ']'; }
","		{ CONCAT return ','; }

 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT return ELSE; }
"while"		{ CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT yylval.val.type_num = V_T; return VOID; }
"int"		{ CONCAT yylval.val.type_num = I_T; return INT; }
"float"  	{ CONCAT yylval.val.type_num = F_T; return FLOAT; }
"string"  	{ CONCAT yylval.val.type_num = S_T; return STRING; }
"bool"  	{ CONCAT yylval.val.type_num = B_T; return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT yylval.val.type_num = B_T; yylval.val.i_val = 1; return TRUE; }
"false"     { CONCAT yylval.val.type_num = B_T; yylval.val.i_val = 0; return FALSE; }

"return"    { if(end_flag) end_flag = 2; CONCAT return RETURN;}

 /* String Constant */
\"				        { CONCAT BEGIN STRING_STATE; return '"'; }
<STRING_STATE>\"		{ CONCAT BEGIN INITIAL; return '"'; }
<STRING_STATE>[^"]*		{ CONCAT yylval.val.type_num = S_T; yylval.val.str_val = strdup(yytext); return STR; }

 /* Number Constant */
{integer}	{ CONCAT yylval.val.type_num = I_T; yylval.val.i_val = atoi(yytext); yylval.val.f_val = atof(yytext); return I_CONST; }
{float}	    { CONCAT yylval.val.type_num = F_T; yylval.val.f_val = atof(yytext); yylval.val.i_val = atoi(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; 
                        CONCAT    
                        if(line_number != last_comment_line) {
                            comment_number++;
                        }
                    }
<COMMENT>[^*\n]+	{ CONCAT }
<COMMENT>\n			{ CONCAT line_number++; comment_number++; printf("%d: %s",line_number,buf); memset(buf,0,BUF_SIZE);}
<COMMENT>"*"		{ CONCAT }
<COMMENT>"*/"		{ CONCAT BEGIN INITIAL; last_comment_line = line_number; }

 /* C++ type Comment */
\/\/.*	{ CONCAT comment_number++; }

 /* Variable ID */
 {id}       { CONCAT yylval.val.type_num = ID_T; 
            yylval.val.id_name = strdup(yytext); 
            if( !strcmp(yytext,"main") ){
                end_flag = 1;
            }
            return ID; }

 /* others */

[ ]         { CONCAT }
[;]         { CONCAT return SEMICOLON; }
[\n]        {   
                if( !strlen(buf) ){  // buf = \n
                    printf("%d:%s\n",++line_number,buf);
                }else{
                    if( syntax_err ){ //occur
                        yyterminate();
                    }
                    if(semantic_err){
                        semantic_err = 0;
                    }else{
                        if( buf[0] != '}')
                            printf("%d: %s\n",++line_number,buf);
                    }
                }
                memset(buf,0,BUF_SIZE);
                
            }
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ CONCAT } /* Ignore other charactor sets */
<<EOF>>     { dump_symbol(0); yyterminate(); }

%%

int yywrap()
{
    return 1;
}
